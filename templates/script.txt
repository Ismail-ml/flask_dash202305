from flask import Flask, render_template, url_for, request, redirect, send_file, send_from_directory
import pandas as pd

app = Flask(__name__)

BSCs = ['NBSC01', 'NBSC02', 'NBSC03', 'NBSC04', 'NBSC05', 'NBSC06', 'NBSC08', 'NBSC09', 'NBSC10', 'NBSC11',
    'NBSC13', 'NBSC14','NBSC15', 'NBSC18','mcBSC16','HBSC01', 'HBSC02', 'HBSC03', 'HBSC04', 'HBSC05', 'HBSC06', 'HBSC07', 'HBSC08', 'HBSC09'
    , 'HBSC10', 'HBSC11', 'HBSC12']
RNCs = ['RNC01', 'RNC02', 'RNC03', 'RNC04', 'RNC05', 'RNC06', 'RNC07','mcRNC08','mcRNC09',
        'HRNC01', 'HRNC02', 'HRNC03', 'HRNC04','HRNC05', 'HRNC07']
Vendors = ['Huawei', 'Nokia']
Sites = ['BBK0004', 'BBK0084', 'BBK0654', 'BBK0045']
Regions = ['Absheron', 'Baku', 'Ganja', 'Naxchivan', 'Sheki', 'Lankaran', 'Quba', 'Qarabag']
KPIs={'2G':{'Call Setup SR':"'cssr_den1','cssr_den2','cssr_den3','cssr_num1','cssr_num2','cssr_num3'",
           'Call Drop Rate':"'drop_rate_num','drop_rate_den'",
           'Call Block Rate':"'call_block_rate_num','call_block_rate_den'",
           'SDCCH Drop Rate':"'sdcch_drop_rate_den','sdcch_drop_rate_num'",
           'SDCCH Block Rate':"'sdcch_block_rate_den','sdcch_block_rate_num'",
           'Handover SR':"'hosr_den','hosr_num'",
           'Cell Availability':"'cell_avail_den','cell_avail_num','cell_avail_blck'",
           'Cell Availability excl blck':"'cell_avail_den','cell_avail_num','cell_avail_blck'",
           'TCH Availability':"'tch_avail_den','tch_avail_num'",
           'SDCCH Availability':"'sdcch_avail_den','sdcch_avail_num'",
           'TBF Est SR':"'tbf_est_sr_den','tbf_est_sr_num'",
           'TBF Drop Rate':"'tbf_drop_rate_den','tbf_drop_rate_num'",
           'CS Traffic, Erl':"'cs_traffic_erl'",
           'PS Traffic, MB':"'ps_traffic_mb'",
           'Combined Thrp, Kbps':"'comb_thrp_den','comb_thrp_num'",
           'Call Setup Fails':"'cssr_den1','cssr_den2','cssr_den3','cssr_num1','cssr_num2','cssr_num3'",
           'Call Setup Den':"'cssr_den1','cssr_den2','cssr_den3','cssr_num1','cssr_num2','cssr_num3'",
           'Call Drops':"'drop_rate_num','drop_rate_den'",
           'Call Blocks':"'call_block_rate_num','call_block_rate_den'",
           'SDCCH Drops':"'sdcch_drop_rate_den','sdcch_drop_rate_num'",
           'SDCCH Blocks':"'sdcch_block_rate_den','sdcch_block_rate_num'",
           'TBF Drops':"'tbf_drop_rate_den','tbf_drop_rate_num'",
           'TBF Est fails':"'tbf_est_sr_den','tbf_est_sr_num'",
           'Handover fails':"'hosr_den','hosr_num'", 'Handover attempts':"'hosr_den','hosr_num'"
           },
     '3G':{'Voice Call Setup SR':"'voice_sr_num1','voice_sr_den1','voice_sr_num2','voice_sr_den2'",
           'Voice Call DR':"'voice_dr_num','voice_dr_den'",
           'HSDPA RAB SR':"'hsdpa_sr_num','hsdpa_sr_den'",
           'HSUPA RAB SR':"'hsupa_sr_num','hsupa_sr_den'",
           'HSDPA Drop Rate':"'hsdpa_dr_num','hsdpa_dr_den'",
           'HSUPA Drop Rate':"'hsupa_dr_num','hsupa_dr_den'",
           'R99 Setup SR':"'r99_sr_num','r99_sr_den'",
           'R99 Drop Rate':"'r99_dr_num','r99_dr_den'",
           'CS Soft HOSR':"'cs_sho_ho_num','cs_sho_ho_den'",
           'PS Soft HOSR':"'ps_sho_ho_num','ps_sho_ho_den'",
           'CS IRAT HOSR':"'cs_inter_rat_ho_num','cs_inter_rat_ho_den'",
           'CS InterFreq HOSR':"'cs_inter_freq_ho_num','cs_inter_freq_ho_den'",
           'PS InterFreq HOSR':"'ps_inter_freq_ho_num','ps_inter_freq_ho_den'",
           'Cell Availability':"'cell_avail_num','cell_avail_den','cell_avail_blck'",
           'Cell Availability excl blck':"'cell_avail_num','cell_avail_den','cell_avail_blck'",
           'Average HSDPA user thrp, Kbps':"'hsdpa_thrp_num','hsdpa_thrp_den'",
           'CS Traffic, Erl':"'cs_traf'",
           'PS Traffic, MB':"'ps_traf'",
           'Call Setup fails':"'voice_sr_num1','voice_sr_den1','voice_sr_num2','voice_sr_den2'",
           'Call drops':"'voice_dr_num','voice_dr_den'",
           'Call Setup attempts':"'voice_sr_num1','voice_sr_den1','voice_sr_num2','voice_sr_den2'",
           'HSDPA Setup fails':"'hsdpa_sr_num','hsdpa_sr_den'",
           'HSDPA Setup attempts':"'hsdpa_sr_num','hsdpa_sr_den'",
           'HSDPA drops':"'hsdpa_dr_num','hsdpa_dr_den'",
           'HSUPA Setup fails':"'hsupa_sr_num','hsupa_sr_den'",
           'HSUPA Setup attempts':"'hsupa_sr_num','hsupa_sr_den'",
           'HSUPA drops':"'hsupa_dr_num','hsupa_dr_den'",
           'CS Soft HO fails':"'cs_sho_ho_num','cs_sho_ho_den'",
           'CS Soft HO attempts':"'cs_sho_ho_num','cs_sho_ho_den'",
           'PS Soft HO fails':"'ps_sho_ho_num','ps_sho_ho_den'",
           'PS Soft HO attempts':"'ps_sho_ho_num','ps_sho_ho_den'",
           'CS IRAT HO attempts':"'cs_inter_rat_ho_num','cs_inter_rat_ho_den'",
           'CS IRAT HO fails':"'cs_inter_rat_ho_num','cs_inter_rat_ho_den'",
           'CS InterFreq HO attempts':"'cs_inter_freq_ho_num','cs_inter_freq_ho_den'",
           'CS InterFreq HO fails':"'cs_inter_freq_ho_num','cs_inter_freq_ho_den'",
           'PS InterFreq HO attempts':"'ps_inter_freq_ho_num','ps_inter_freq_ho_den'",
           'PS InterFreq HO fails':"'ps_inter_freq_ho_num','ps_inter_freq_ho_den'"},
     '4G':{'RRC Setup SR':"'rrc_sr_num','rrc_sr_den'",
           'RAB Setup SR':"'rab_sr_num','rab_sr_den'",
           'Session Setup SR':"'rrc_sr_num','rrc_sr_den','rab_sr_num','rab_sr_den'",
           'CSFB SR':"'csfb_sr_num','csfb_sr_den'",
           'Session Drop Rate':"'dcr_num','dcr_den'",
           'Cell Availability':"'cell_avail_num','cell_avail_den','cell_avail_blck'",
           'Cell Availability excl blck':"'cell_avail_num','cell_avail_den','cell_avail_blck'",
           'IntraFreq HOSR':"'intra_freq_ho_num','intra_freq_ho_den'",
           '4G-3G IRAT HOSR':"'irat_ho_num','irat_ho_den'",
           'DL Traffic, MB':"'dl_ps_traf'",
           'UL Traffic, MB':"'ul_ps_traf'",
           'Total Traffic, MB':"'dl_ps_traf','ul_ps_traf'",
           'DL Throughput, Kbps':"'dl_thrp_num','dl_thrp_den'",
           'UL Throughput, Kbps':"'ul_thrp_num','ul_thrp_den'",
           'RRC Setup fails':"'rrc_sr_num','rrc_sr_den'",
           'RRC Setup attempts':"'rrc_sr_num','rrc_sr_den'",
           'RAB Setup fails':"'rab_sr_num','rab_sr_den'",
           'RAB Setup attempts':"'rab_sr_num','rab_sr_den'",
           'Session drops':"'dcr_num','dcr_den'",
           'CSFB fails':"'csfb_sr_num','csfb_sr_den'",
           'CSFB attempts':"'csfb_sr_num','csfb_sr_den'",
           'IntraFreq HO fails':"'intra_freq_ho_num','intra_freq_ho_den'",
           'IntraFreq HO attempts':"'intra_freq_ho_num','intra_freq_ho_den'",
           '4G-3G IRAT HO fails':"'irat_ho_num','irat_ho_den'",
           '4G-3G IRAT HO attempts':"'irat_ho_num','irat_ho_den'"}}
Formula={'2G':{'Call Setup SR':"100*(1-tt['cssr_num1']/tt['cssr_den1'])*tt['cssr_num2']/tt['cssr_den2']*tt['cssr_num3']/tt['cssr_den3']",
           'Call Drop Rate':"tt['drop_rate_num']/tt['drop_rate_den']*100",
           'Call Block Rate':"tt['call_block_rate_num']/tt['call_block_rate_den']*100",
           'SDCCH Drop Rate':"tt['sdcch_drop_rate_num']/tt['sdcch_drop_rate_den']*100",
           'SDCCH Block Rate':"tt['sdcch_block_rate_num']/tt['sdcch_block_rate_den']*100",
           'Handover SR':"tt['hosr_num']/tt['hosr_den']*100",
           'Cell Availability':"(tt['cell_avail_num']-tt['cell_avail_blck'])/tt['cell_avail_den']*100",
           'Cell Availability excl blck':"tt['cell_avail_num']/tt['cell_avail_den']*100",
           'TCH Availability':"tt['tch_avail_num']/tt['tch_avail_den']*100",
           'SDCCH Availability':"tt['sdcch_avail_num']/tt['sdcch_avail_den']*100",
           'TBF Est SR':"tt['tbf_est_sr_num']/tt['tbf_est_sr_den']",
           'TBF Drop Rate':"tt['tbf_drop_rate_num']/tt['tbf_drop_rate_den']*100",
           'CS Traffic, Erl':"tt['cs_traffic_erl']",
           'PS Traffic, MB':"tt['ps_traffic_mb']",
           'Combined Thrp, Kbps':"tt['comb_thrp_num']/tt['comb_thrp_den']",
           'Call Setup Fails':"tt['cssr_num1']+tt['cssr_den2']+tt['cssr_den3']-tt['cssr_num2']-tt['cssr_num3']",
           'Call Setup Den':"tt['cssr_den1']+tt['cssr_den2']+tt['cssr_den3']",
           'Call Drops':"tt['drop_rate_num']",
           'Call Blocks':"tt['call_block_rate_num']",
           'SDCCH Drops':"tt['sdcch_drop_rate_num']",
           'SDCCH Blocks':"tt['sdcch_block_rate_num']",
           'TBF Drops':"tt['tbf_drop_rate_num']",
           'TBF Est fails':"tt['tbf_est_sr_den']-tt['tbf_est_sr_num']",
           'Handover fails':"tt['hosr_den']-tt['hosr_num']", 'Handover attempts':"tt['hosr_den']"
           },
        '3G':{'Voice Call Setup SR':"100*tt['voice_sr_num1']/tt['voice_sr_den1']*tt['voice_sr_num2']/tt['voice_sr_den2']",
           'Voice Call DR':"100*tt['voice_dr_num']/tt['voice_dr_den']",
           'HSDPA RAB SR':"100*tt['hsdpa_sr_num']/tt['hsdpa_sr_den']",
           'HSUPA RAB SR':"100*tt['hsupa_sr_num']/tt['hsupa_sr_den']",
           'HSDPA Drop Rate':"100*tt['hsdpa_dr_num']/tt['hsdpa_dr_den']",
           'HSUPA Drop Rate':"100*tt['hsupa_dr_num']/tt['hsupa_dr_den']",
           'R99 Setup SR':"100*tt['r99_sr_num']/tt['r99_sr_den']",
           'R99 Drop Rate':"100*tt['r99_dr_num']/tt['r99_dr_den']",
           'CS Soft HOSR':"100*tt['cs_sho_ho_num']/tt['cs_sho_ho_den']",
           'PS Soft HOSR':"100*tt['ps_sho_ho_num']/tt['ps_sho_ho_den']",
           'CS IRAT HOSR':"100*tt['cs_inter_rat_ho_num']/tt['cs_inter_rat_ho_den']",
           'CS InterFreq HOSR':"100*tt['cs_inter_freq_ho_num']/tt['cs_inter_freq_ho_den']",
           'PS InterFreq HOSR':"100*tt['ps_inter_freq_ho_num']/tt['ps_inter_freq_ho_den']",
           'Cell Availability':"100*(tt['cell_avail_num']-tt['cell_avail_blck'])/tt['cell_avail_den']",
           'Cell Availability excl blck':"100*tt['cell_avail_num']/tt['cell_avail_den']",
           'Average HSDPA user thrp, Kbps':"tt['hsdpa_thrp_num']/tt['hsdpa_thrp_den']",
           'CS Traffic, Erl':"tt['cs_traf']",
           'PS Traffic, MB':"tt['ps_traf']",
           'Call Setup fails':"tt['voice_sr_den1']+tt['voice_sr_den2']-tt['voice_sr_num1']-tt['voice_sr_num2']",
           'Call drops':"tt['voice_dr_num']",
           'Call Setup attempts':"tt['voice_sr_den1']+tt['voice_sr_den2']",
           'HSDPA Setup fails':"tt['hsdpa_sr_den']-tt['hsdpa_sr_num']",
           'HSDPA Setup attempts':"tt['hsdpa_sr_den']",
           'HSDPA drops':"tt['hsdpa_dr_num']",
           'HSUPA Setup fails':"tt['hsupa_sr_den']-tt['hsupa_sr_num']",
           'HSUPA Setup attempts':"tt['hsupa_sr_den']",
           'HSUPA drops':"tt['hsupa_dr_num']",
           'CS Soft HO fails':"tt['cs_sho_ho_den']-tt['cs_sho_ho_num']",
           'CS Soft HO attempts':"tt['cs_sho_ho_den']",
           'PS Soft HO fails':"tt['ps_sho_ho_den']-tt['ps_sho_ho_num']",
           'PS Soft HO attempts':"tt['ps_sho_ho_den']",
           'CS IRAT HO attempts':"tt['cs_inter_rat_ho_den']",
           'CS IRAT HO fails':"tt['cs_inter_rat_ho_den']-tt['cs_inter_rat_ho_num']",
           'CS InterFreq HO attempts':"tt['cs_inter_freq_ho_den']",
           'CS InterFreq HO fails':"tt['cs_inter_freq_ho_den']-tt['cs_inter_freq_ho_num']",
           'PS InterFreq HO attempts':"tt['ps_inter_freq_ho_den']",
           'PS InterFreq HO fails':"tt['ps_inter_freq_ho_den']-tt['ps_inter_freq_ho_num']"},
        '4G':{'RRC Setup SR':"100*tt['rrc_sr_num']/tt['rrc_sr_den']",
           'RAB Setup SR':"100*tt['rab_sr_num']/tt['rab_sr_den']",
           'Session Setup SR':"100*tt['rrc_sr_num']/tt['rrc_sr_den']*tt['rab_sr_num']/tt['rab_sr_den']",
           'CSFB SR':"100*tt['csfb_sr_num']/tt['csfb_sr_den']",
           'Session Drop Rate':"100*tt['dcr_num']/tt['dcr_den']",
           'Cell Availability':"100*(tt['cell_avail_num']-tt['cell_avail_blck'])/tt['cell_avail_den']",
           'Cell Availability excl blck':"100*tt['cell_avail_num']/tt['cell_avail_den']",
           'IntraFreq HOSR':"100*tt['intra_freq_ho_num']/tt['intra_freq_ho_den']",
           '4G-3G IRAT HOSR':"100*tt['irat_ho_num']/tt['irat_ho_den']",
           'DL Traffic, MB':"tt['dl_ps_traf']",
           'UL Traffic, MB':"tt['ul_ps_traf']",
           'Total Traffic, MB':"tt['dl_ps_traf']+tt['ul_ps_traf']",
           'DL Throughput, Kbps':"tt['dl_thrp_num']/tt['dl_thrp_den']",
           'UL Throughput, Kbps':"tt['ul_thrp_num']/tt['ul_thrp_den']",
           'RRC Setup fails':"tt['rrc_sr_den']-tt['rrc_sr_num']",
           'RRC Setup attempts':"tt['rrc_sr_den']",
           'RAB Setup fails':"tt['rab_sr_den']-tt['rab_sr_num']",
           'RAB Setup attempts':"tt['rab_sr_den']",
           'Session drops':"tt['dcr_num']",
           'CSFB fails':"tt['csfb_sr_den']-tt['csfb_sr_num']",
           'CSFB attempts':"tt['csfb_sr_den']",
           'IntraFreq HO fails':"tt['intra_freq_ho_den']-tt['intra_freq_ho_num']",
           'IntraFreq HO attempts':"tt['intra_freq_ho_den']",
           '4G-3G IRAT HO fails':"tt['irat_ho_den']-tt['irat_ho_num']",
           '4G-3G IRAT HO attempts':"tt['irat_ho_den']"}}

class page:
    a=None

route=page()

@app.route("/", methods=('GET', 'POST'))
@app.route("/home", methods=('GET', 'POST'))
def home():
    return render_template('home.html', BSCs=BSCs, Vendors=Vendors, Sites=Sites, Regions=Regions)


@app.route("/result", methods=['POST'])
def result():
    # df=data.df
    # df['PERIOD_START_TIME']=pd.to_datetime(df['PERIOD_START_TIME'], format='%m.%d.%Y %H:%M:%S')

    class MyStr(str):
        """ Special string subclass to override the default representation method
            which puts single quotes around the result.
        """

    def __repr__(self):
        return super(MyStr, self).__repr__().strip('"')

    grp = []

    global Formula_2G
    global KPIs_2G
    if len(request.form.getlist("Clusterlist")) >= 5:
        NeSelected = request.form.getlist("Clusterlist")
        # filt=str("(df['BTS name'].apply(lambda x: x[:8]).isin(NeSelected))")
        filt = str("Site_name=NeSelected")
    elif len(request.form.getlist("BSClist")) != 0:
        NeSelected = request.form.getlist("BSClist")
        # filt=str("(df['BSC name'].isin(NeSelected))")
        filt = str("BSC_name=NeSelected")
    elif len(request.form.getlist("RNClist")) != 0:
        NeSelected = request.form.getlist("RNClist")
        # filt=str("(df['BSC name'].isin(NeSelected))")
        filt = str("RNC_name=NeSelected")
    elif len(request.form.getlist("Regionlist")) != 0:
        NeSelected = request.form.getlist("Regionlist")
        filt = str("Region=NeSelected")
    elif len(request.form.getlist("Vendorlist")) != 0:
        NeSelected = request.form.getlist("Vendorlist")
        filt = str("Vendor=NeSelected")
    elif len(request.form.getlist("Sitelist")) != 0:
        NeSelected = request.form.getlist("Sitelist")
        # filt=str("(df['BTS name'].apply(lambda x: x[:8]).isin(NeSelected))")
        filt = str("Site_name=NeSelected")
    else:
        filt = str("Vendor=['Nokia,'Huawe']")
    ReportLevel = request.form.get("report_level")
    TimeLevel = request.form.get("time_resolution")
    StartDate = request.form.get("start_date")
    EndDate = request.form.get("end_date")
    KPIselected = request.form.getlist("KPIlist")

    col=['Date','Vendor','Region']
    if (ReportLevel!='Site_name') & (ReportLevel!='Cell_name') & (NeSelected!='Site_name') & (NeSelected!='Cluster'):
        extension='/bsc'
    else:
        extension=''
        col.append('Site_name')
        col.append('Cell_name')


    # filt= filt + ' & ' + str("(df['PERIOD_START_TIME']>StartDate)") + ' & ' + str("(df['PERIOD_START_TIME']<EndDate)")
    if '3G' in str(route.a):
        path='/threeG'+extension
        col.append('RNC_name')
        tech='3G'
    elif '2G' in str(route.a):
        path='/twoG'+extension
        col.append('BSC_name')
        tech='2G'
    elif '4G' in str(route.a):
        path='/fourG'+extension
        tech='4G'
    p = []
    [p.append(eval(MyStr(KPIs[tech][i]))) if KPIs[tech][i].find(',')<0 else [p.append(j) for j in eval(MyStr(KPIs[tech][i]))] for i in KPIselected]
    [col.append(i) for i in p]
    df = pd.read_hdf(r'C:\Users\ismayilm\Downloads\Python\Practice\PRB_Utilization\UPMS\combined.hdf', key=path,
         where=['Date>StartDate & Date<EndDate & ' + MyStr(filt)],columns=list(set(col)))

    # df['Site name']=df['BTS name'].apply(lambda x: x[:8])
    grp.append(ReportLevel)
    if (len(request.form.getlist("Clusterlist")) >= 5) or (ReportLevel == 'Network'):
        grp = []

    # df=df[eval(MyStr(filt))]
    if TimeLevel == 'Daily':
        grp.append(pd.DatetimeIndex(df['Date']).strftime('%d.%m.%Y'))
    else:
        grp.append(df['Date'])

    tt = pd.DataFrame(df.groupby(grp).sum())
    ff = pd.DataFrame([round(eval(MyStr(Formula[tech][d]), {}, {'tt': tt}), 2) for d in KPIselected], index=KPIselected).T
    if ff.index.nlevels > 1:
        ff.index.rename('Period', level=1, inplace=True)
    else:
        ff.index.rename('Period', inplace=True)
    ff.reset_index(inplace=True)
    if request.form.get("direct_export") == 'Yes':

        return send_file(filename_or_fp=r'C:\Users\ismayilm\Downloads\Python\Practice\PRB_Utilization\UPMS\result.csv',
                         as_attachment=True, attachment_filename='result.csv', mimetype='/text-csv')

    else:
        return render_template('result.html', data=ff.to_dict(orient='records'), titles=ff.columns.values)


@app.route("/2G", methods=('GET', 'POST'))
def twoG():
    # df=pd.read_hdf(r"C:\Users\ismayilm\Downloads\Python\Practice\PRB_Utilization\UPMS\nokia_agr1.hdf",key='/data')
    # data.df=df
    route.a = request.url_rule
    Sites = pd.read_csv(r'C:\Users\ismayilm\Downloads\Python\Practice\PRB_Utilization\UPMS\sites.csv').values[:,
            1].tolist()

    return render_template('2G.html', title='2G', BSCs=BSCs, Vendors=Vendors, Sites=Sites, Regions=Regions,
                           KPIs=list(KPIs['2G'].keys()))


@app.route("/3G", methods=('GET', 'POST'))
def threeG():
    route.a = request.url_rule
    return render_template('3G.html', title='3G', RNCs=RNCs, Vendors=Vendors, Sites=Sites, Regions=Regions,
                           KPIs=list(KPIs['3G'].keys()))


@app.route("/4G", methods=('GET', 'POST'))
def fourG():
    route.a = request.url_rule
    return render_template('4G.html', title='4G', Vendors=Vendors, Sites=Sites, Regions=Regions, KPIs=list(KPIs['4G'].keys()))


if __name__ == '__main__':
    app.run(debug=True)
